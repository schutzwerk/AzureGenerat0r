# This specification creates two subnets.
# The first subnet contains an Active Directory with an Domain Controller and two Domain Computers.
# The second subnet contains a dual homed host, that serves a random vulnerable service which is accessible remotely.
# The purpose of this example is only to show the syntax and how to use the features.

# it is stored in json not yml, because of better syntax highlighting
# This specification creates two subnets.
# The first subnet contains an Active Directory with an Domain Controller and two Domain Computers.
# The second subnet contains a dual homed host, that serves a random vulnerable service which is accessible remotely.

myPublicIP: none                              # public ip address of the user to secure access to VMs. none => exposed to the internet
network:
- addressSpace: 10.0.8.0/24                   # defines subnet with ID 0. only use 10.0.0.0/16.
  vms:                                        # define VMs for subnet0
  - system: WindowsServer                     # define OS of a VM.
    interfaces:
    - [0, static, 10.0.8.100]                 # define interfaces for a VM. [<subnetID>, <dynamic/static>, <ip>]
    modules:
    - path: windows/config/promoteToDC        # define modules from the modules directory. <OS>/<type>/<module>
      args: {domainName: ansible.local}       # specify parameter for the specified module
    - path: windows/config/createDomainUser
      args: {user: [bob, alice], domainServer: myVM-00}   # it is possible to develop modules that use lists as parameters
  - system: WindowsServer
    counter: 2                                # counter to create multiple VMs
    delayedEnrichment: true                   # deploy module in second stage
    modules:
    - path: windows/config/addComputerToAD
      args: {domainName: ansible.local, ipDC: 10.0.8.100, hostName: PLUGIN/hostnameGenerator} #fill parameter 'hostName' with a value generated by the hostnameGenerator plugin
- addressSpace: 10.0.10.0/24                  # defines subnet with ID 1
  vms:
  - system: UbuntuServer
    interfaces:
    - [1, static, 10.0.10.5]
    - [0, dynamic, none]
    modules:
    - type: vulnerability                     # choose a random module based on a type. Implemented types are: service, software, vulnerability, config => see modules director
      properties: {hasCVE: true}              # use



# available operating systems
#     UbuntuServer  => Canonical,UbuntuServer,16.04-LTS
#     WindowsServer => MicrosoftWindowsServer,WindowsServer,2012-R2
# available routing options
#     see https://www.terraform.io/docs/providers/azurerm/r/route_table.html#argument-reference
#     the definition of routes is currently not possible because of an AzureRessourceManager update

# default values:
#     no addressSpace => 10.0.1.0/24, 10.0.2.0/24,..
#     no system => UbuntuServer
#     no interface => VM gets an dynamic ip address within the subnet it was defined.

# the same network could be created with the usage of templates (see templates directory).
# mounting the template, the specification would look like this:
# myPublicIP: 92.117.176.166
# - mountTemplate: ActiveDirectoryAndRandomVulnWebServer.yml
